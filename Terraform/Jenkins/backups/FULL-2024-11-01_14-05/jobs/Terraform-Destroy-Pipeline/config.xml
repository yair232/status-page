<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1436.vfa_244484591f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3975.v567e2a_1ffa_22">
    <script>pipeline {
    agent any

    environment {
        AWS_CREDENTIALS_ID = &apos;aws-credentials&apos;  // AWS credentials in Jenkins
        GITHUB_CREDENTIALS_ID = &apos;github-ssh-key&apos;  // SSH key credential ID for GitHub
    }

    stages {
        stage(&apos;Clone Repository&apos;) {
            steps {
                script {
                    echo &quot;Cloning the Git repository...&quot;
                }
                git branch: &apos;main&apos;,
                    url: &apos;git@github.com:yair232/status-page.git&apos;,
                    credentialsId: &quot;${GITHUB_CREDENTIALS_ID}&quot;
            }
        }

        stage(&apos;Terraform Destroy&apos;) {
            environment {
                AWS_ACCESS_KEY_ID = credentials(&quot;${AWS_CREDENTIALS_ID}&quot;)
                AWS_SECRET_ACCESS_KEY = credentials(&quot;${AWS_CREDENTIALS_ID}&quot;)
            }
            steps {
                dir(&apos;final-project-terraform&apos;) {
                    script {
                        echo &quot;Running terraform destroy...&quot;
                    }
                    sh &apos;&apos;&apos;
                    terraform init
                    terraform destroy -auto-approve
                    &apos;&apos;&apos;
                }
            }
        }
    }

    post {
        always {
            script {
                echo &quot;Clean up workspace...&quot;
            }
            cleanWs()
        }
        success {
            echo &apos;Terraform destroy completed successfully!&apos;
        }
        failure {
            echo &apos;Terraform destroy failed. Please check the logs.&apos;
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>