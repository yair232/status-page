<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1436.vfa_244484591f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Stage 1: Terraform Init + Plan + Apply &#xd;
&#xd;
Stage 2: Unitest - This unitest.py checks:&#xd;
          - Verifying the whole python files without syntax error &#xd;
&#xd;
Stage 3: Build Docker Image&#xd;
&#xd;
Stage 4: Push The New Image to DockerHub&#xd;
&#xd;
Stage 5: Downloading ArgoCD inside the cluster - EKS</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.40.0">
      <projectUrl>https://github.com/yair232/status-page.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3975.v567e2a_1ffa_22">
    <script>pipeline {
    agent any

    environment {
        AWS_CREDENTIALS_ID = &apos;aws-credentials&apos;  // AWS credentials in Jenkins
        GITHUB_CREDENTIALS_ID = &apos;github-ssh-key&apos;  // SSH key credential ID for GitHub
        DOCKER_CREDENTIALS_ID = &apos;dockerhub-credentials&apos;  // DockerHub credentials in Jenkins
        DOCKER_IMAGE_NAME = &apos;rontz/status-page&apos;  // Docker image name
    }

    stages {
        stage(&apos;Clone Repository&apos;) {
            steps {
                script {
                    echo &quot;Cloning the Git repository...&quot;
                }
                git branch: &apos;main&apos;,
                    url: &apos;git@github.com:yair232/status-page.git&apos;,
                    credentialsId: &quot;${GITHUB_CREDENTIALS_ID}&quot;
            }
        }

        stage(&apos;Set Permissions&apos;) {
            steps {
                script {
                    echo &quot;Setting executable permissions for manage.py and upgrade.sh...&quot;
                }
                sh &apos;&apos;&apos;
                chmod +x statuspage/manage.py
                chmod +x upgrade.sh
                &apos;&apos;&apos;
            }
        }

        stage(&apos;Run Unit Tests&apos;) {
            steps {
                script {
                    echo &quot;Running unit tests using pytest...&quot;
                }
                sh &apos;&apos;&apos;
                pytest unitest.py
                &apos;&apos;&apos;
            }
        }

        stage(&apos;Terraform Init &amp; Apply&apos;) {
            environment {
                AWS_ACCESS_KEY_ID = credentials(&apos;aws-credentials&apos;)
                AWS_SECRET_ACCESS_KEY = credentials(&apos;aws-credentials&apos;)
            }
            steps {
                dir(&apos;final-project-terraform&apos;) {
                    script {
                        echo &quot;Initializing and applying Terraform configuration...&quot;
                    }
                    sh &apos;&apos;&apos;
                    terraform init
                    terraform plan -out=tfplan
                    terraform apply -auto-approve tfplan
                    &apos;&apos;&apos;
                }
            }
        }

        stage(&apos;Save Terraform State to Git&apos;) {
            steps {
                dir(&apos;final-project-terraform&apos;) {
                    script {
                        echo &quot;Saving Terraform state file to Git...&quot;
                    }
                    sshagent(credentials: [&quot;${GITHUB_CREDENTIALS_ID}&quot;]) {
                        sh &apos;&apos;&apos;
                        git config --global user.email &quot;jenkins@example.com&quot;
                        git config --global user.name &quot;Jenkins CI&quot;
                        git add terraform.tfstate
                        git commit -m &quot;Update Terraform state&quot;
                        git push origin main
                        &apos;&apos;&apos;
                    }
                }
            }
        }

        stage(&apos;Build Docker Image&apos;) {
            steps {
                script {
                    echo &quot;Building Docker image from the Dockerfile...&quot;
                }
                sh &apos;&apos;&apos;
                docker build -t ${DOCKER_IMAGE_NAME}:latest .
                &apos;&apos;&apos;
            }
        }

        stage(&apos;Test Docker Image&apos;) {
            steps {
                script {
                    echo &quot;Testing Docker image for basic functionality...&quot;
                }
                sh &apos;&apos;&apos;
                docker run --name test-container -d ${DOCKER_IMAGE_NAME}:latest
                docker exec test-container /bin/bash -c &quot;echo &apos;Running health check...&apos;; sleep 2; echo &apos;Service is up&apos;&quot;
                docker stop test-container
                docker rm test-container
                &apos;&apos;&apos;
            }
        }

        stage(&apos;Push Docker Image to Docker Hub&apos;) {
            steps {
                script {
                    echo &quot;Pushing Docker image to Docker Hub...&quot;
                }
                withCredentials([usernamePassword(credentialsId: &quot;${DOCKER_CREDENTIALS_ID}&quot;, usernameVariable: &apos;DOCKER_USER&apos;, passwordVariable: &apos;DOCKER_PASS&apos;)]) {
                    sh &apos;&apos;&apos;
                    echo &quot;$DOCKER_PASS&quot; | docker login -u &quot;$DOCKER_USER&quot; --password-stdin
                    docker push ${DOCKER_IMAGE_NAME}:latest
                    docker logout
                    &apos;&apos;&apos;
                }
            }
        }

        stage(&apos;Install Argo CD on EKS Cluster&apos;) {
            environment {
                AWS_ACCESS_KEY_ID = credentials(&apos;aws-credentials&apos;)
                AWS_SECRET_ACCESS_KEY = credentials(&apos;aws-credentials&apos;)
            }
            steps {
                script {
                    echo &quot;Logging into EKS cluster and installing Argo CD using cluster-install-argocd.sh...&quot;
                }
                sh &apos;&apos;&apos;
                chmod +x final-project-terraform/Jenkins/cluster-install-argocd.sh
                ./final-project-terraform/Jenkins/cluster-install-argocd.sh
                &apos;&apos;&apos;
            }
        }
    }

    post {
        always {
            script {
                echo &quot;Cleaning up workspace and Docker resources...&quot;
            }
            cleanWs()
            sh &apos;docker system prune -f&apos;
        }
        success {
            echo &apos;Pipeline completed successfully!&apos;
        }
        failure {
            echo &apos;Pipeline failed. Please check the logs.&apos;
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>